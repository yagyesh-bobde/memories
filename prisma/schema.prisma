// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model memories_Account {
  id                       String        @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     memories_User @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model memories_Session {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         memories_User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model memories_User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      memories_Account[]
  sessions      memories_Session[]
  audios        memories_Audio[]
  memories      memories_Memory[]
}

model memories_VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model memories_Audio {
  id        String            @id @default(cuid())
  userId    String
  user      memories_User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  fileUrl   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  memories  memories_Memory[]
}

model memories_Memory {
  id          String         @id @default(cuid())
  userId      String
  user        memories_User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  audioId     String
  audio       memories_Audio @relation(fields: [audioId], references: [id], onDelete: Cascade)
  title       String
  description String
  tags        String[]
  eventDate   DateTime
  upvotes     Int            @default(0)
  downvotes   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
